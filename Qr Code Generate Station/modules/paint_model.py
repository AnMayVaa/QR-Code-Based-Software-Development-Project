# modules/paint_model.py
# ‡πÉ‡∏ä‡πâ AnimeGAN2 ‡∏ú‡πà‡∏≤‡∏ô torch.hub + face2paint
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô style ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "celeba_distill", "paprika"

import os
import cv2
import torch
import numpy as np
from PIL import Image

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Pi4 ‡∏à‡∏∞‡πÑ‡∏î‡πâ "cpu")
_DEVICE = "cuda" if torch.cuda.is_available() else "cpu"

# cache ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
_CACHED = {"style": None, "size": None, "gen": None, "face2paint": None}


def _get_models(style: str = "face_paint_512_v2", size: int = 512):
    """
    ‡πÇ‡∏´‡∏•‡∏î/‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• generator + face2paint ‡∏ï‡∏≤‡∏° style/size
    """
    global _CACHED

    reload_needed = (
        _CACHED["gen"] is None
        or _CACHED["style"] != style
        or _CACHED["size"] != size
    )
    if reload_needed:
        print(f"‚¨á Loading AnimeGAN2 ({style}, size={size}) on {_DEVICE} ...")
        gen = torch.hub.load(
            "bryandlee/animegan2-pytorch:main",
            "generator",
            pretrained=style
        ).to(_DEVICE).eval()

        face2paint = torch.hub.load(
            "bryandlee/animegan2-pytorch:main",
            "face2paint",
            size=size
        )

        _CACHED.update({
            "style": style,
            "size": size,
            "gen": gen,
            "face2paint": face2paint,
        })
        print("‚úÖ Model ready (cached).")

    return _CACHED["gen"], _CACHED["face2paint"]


def cartoonize_bgr(bgr_frame: np.ndarray,
                   style: str = "face_paint_512_v2",
                   size: int = 512) -> np.ndarray:
    """
    ‡∏£‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏° BGR (‡∏à‡∏≤‡∏Å OpenCV) -> ‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏û BGR ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏û‡∏ô‡∏ó‡πå‡πÅ‡∏•‡πâ‡∏ß
    """
    gen, face2paint = _get_models(style=style, size=size)

    # BGR -> RGB -> PIL
    rgb = cv2.cvtColor(bgr_frame, cv2.COLOR_BGR2RGB)
    pil = Image.fromarray(rgb)

    # inference ‡∏ú‡πà‡∏≤‡∏ô face2paint
    out_pil = face2paint(gen, pil)

    # ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô BGR ‡πÉ‡∏´‡πâ OpenCV
    out_bgr = cv2.cvtColor(np.array(out_pil), cv2.COLOR_RGB2BGR)
    return out_bgr


def generate_paint(input_path: str,
                   output_dir: str = "output/paint",
                   style: str = "face_paint_512_v2",
                   size: int = 512) -> str:
    """
    ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏ò‡∏£‡∏π‡∏õ (‡πÄ‡∏ä‡πà‡∏ô output/raw/capture.jpg) ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ã‡∏ü‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏ô‡∏ó‡πå‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output/paint
    ‡∏Ñ‡∏∑‡∏ô‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    """
    os.makedirs(output_dir, exist_ok=True)

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô BGR (OpenCV)
    bgr = cv2.imread(input_path)
    if bgr is None:
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û: {input_path}")

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡πÄ‡∏û‡∏ô‡∏ó‡πå
    out_bgr = cartoonize_bgr(bgr, style=style, size=size)

    # ‡∏û‡∏≤‡∏ò‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ã‡∏ü
    output_path = os.path.join(output_dir, f"painted_{style}.jpg")

    success = cv2.imwrite(output_path, out_bgr)
    if not success:
        raise RuntimeError(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {output_path}")

    print(f"üé® Saved painted image: {output_path}")
    return output_path
